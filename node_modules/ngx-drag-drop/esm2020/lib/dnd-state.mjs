import { CUSTOM_MIME_TYPE, DROP_EFFECTS, filterEffects, getWellKnownMimeType, JSON_MIME_TYPE, MSIE_MIME_TYPE } from "./dnd-utils";
const _dndState = {
    isDragging: false,
    dropEffect: "none",
    effectAllowed: "all",
    type: undefined
};
export function startDrag(event, effectAllowed, type) {
    _dndState.isDragging = true;
    _dndState.dropEffect = "none";
    _dndState.effectAllowed = effectAllowed;
    _dndState.type = type;
    if (event.dataTransfer) {
        event.dataTransfer.effectAllowed = effectAllowed;
    }
}
export function endDrag() {
    _dndState.isDragging = false;
    _dndState.dropEffect = undefined;
    _dndState.effectAllowed = undefined;
    _dndState.type = undefined;
}
export function setDropEffect(event, dropEffect) {
    if (_dndState.isDragging === true) {
        _dndState.dropEffect = dropEffect;
    }
    if (event.dataTransfer) {
        event.dataTransfer.dropEffect = dropEffect;
    }
}
export function getDropEffect(event, effectAllowed) {
    const dataTransferEffectAllowed = (event.dataTransfer) ? event.dataTransfer.effectAllowed : "uninitialized";
    let effects = filterEffects(DROP_EFFECTS, dataTransferEffectAllowed);
    if (_dndState.isDragging === true) {
        effects = filterEffects(effects, _dndState.effectAllowed);
    }
    if (effectAllowed) {
        effects = filterEffects(effects, effectAllowed);
    }
    // MacOS automatically filters dataTransfer.effectAllowed depending on the modifier keys,
    // therefore the following modifier keys will only affect other operating systems.
    if (effects.length === 0) {
        return "none";
    }
    if (event.ctrlKey && effects.indexOf("copy") !== -1) {
        return "copy";
    }
    if (event.altKey && effects.indexOf("link") !== -1) {
        return "link";
    }
    return effects[0];
}
export function getDndType(event) {
    if (_dndState.isDragging === true) {
        return _dndState.type;
    }
    const mimeType = getWellKnownMimeType(event);
    if (mimeType === null) {
        return undefined;
    }
    if (mimeType === MSIE_MIME_TYPE
        || mimeType === JSON_MIME_TYPE) {
        return undefined;
    }
    return mimeType.substr(CUSTOM_MIME_TYPE.length + 1) || undefined;
}
export function isExternalDrag() {
    return _dndState.isDragging === false;
}
export const dndState = _dndState;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG5kLXN0YXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvZG5kL3NyYy9saWIvZG5kLXN0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsWUFBWSxFQUNaLGFBQWEsRUFDYixvQkFBb0IsRUFDcEIsY0FBYyxFQUNkLGNBQWMsRUFDZixNQUFNLGFBQWEsQ0FBQztBQVVyQixNQUFNLFNBQVMsR0FBWTtJQUN6QixVQUFVLEVBQUUsS0FBSztJQUNqQixVQUFVLEVBQUUsTUFBTTtJQUNsQixhQUFhLEVBQUUsS0FBSztJQUNwQixJQUFJLEVBQUUsU0FBUztDQUNoQixDQUFDO0FBRUYsTUFBTSxVQUFVLFNBQVMsQ0FBRSxLQUFlLEVBQUUsYUFBMkIsRUFBRSxJQUF1QjtJQUU5RixTQUFTLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUM1QixTQUFTLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQztJQUM5QixTQUFTLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztJQUN4QyxTQUFTLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUV0QixJQUFHLEtBQUssQ0FBQyxZQUFZLEVBQUU7UUFFckIsS0FBSyxDQUFDLFlBQVksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0tBQ2xEO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxPQUFPO0lBRXJCLFNBQVMsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQzdCLFNBQVMsQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO0lBQ2pDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDO0lBQ3BDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO0FBQzdCLENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFFLEtBQWUsRUFBRSxVQUFxQjtJQUVuRSxJQUFJLFNBQVMsQ0FBQyxVQUFVLEtBQUssSUFBSSxFQUFHO1FBRWxDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0tBQ25DO0lBRUQsSUFBRyxLQUFLLENBQUMsWUFBWSxFQUFFO1FBRXJCLEtBQUssQ0FBQyxZQUFZLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztLQUM1QztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFFLEtBQWUsRUFBRSxhQUF5QztJQUV2RixNQUFNLHlCQUF5QixHQUFpQixDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxhQUE4QixDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUM7SUFFM0ksSUFBSSxPQUFPLEdBQUcsYUFBYSxDQUFFLFlBQVksRUFBRSx5QkFBeUIsQ0FBRSxDQUFDO0lBRXZFLElBQUksU0FBUyxDQUFDLFVBQVUsS0FBSyxJQUFJLEVBQUc7UUFFbEMsT0FBTyxHQUFHLGFBQWEsQ0FBRSxPQUFPLEVBQUUsU0FBUyxDQUFDLGFBQWMsQ0FBRSxDQUFDO0tBQzlEO0lBRUQsSUFBSSxhQUFhLEVBQUc7UUFFbEIsT0FBTyxHQUFHLGFBQWEsQ0FBRSxPQUFPLEVBQUUsYUFBYSxDQUFFLENBQUM7S0FDbkQ7SUFFRCx5RkFBeUY7SUFDekYsa0ZBQWtGO0lBQ2xGLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUc7UUFFekIsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUVELElBQUksS0FBSyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFFLE1BQU0sQ0FBRSxLQUFLLENBQUMsQ0FBQyxFQUFHO1FBRXRELE9BQU8sTUFBTSxDQUFDO0tBQ2Y7SUFFRCxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBRSxNQUFNLENBQUUsS0FBSyxDQUFDLENBQUMsRUFBRztRQUVyRCxPQUFPLE1BQU0sQ0FBQztLQUNmO0lBRUQsT0FBTyxPQUFPLENBQUUsQ0FBQyxDQUFnQixDQUFDO0FBQ3BDLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFFLEtBQWU7SUFFekMsSUFBSSxTQUFTLENBQUMsVUFBVSxLQUFLLElBQUksRUFBRztRQUVsQyxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUM7S0FDdkI7SUFFRCxNQUFNLFFBQVEsR0FBRyxvQkFBb0IsQ0FBRSxLQUFLLENBQUUsQ0FBQztJQUUvQyxJQUFJLFFBQVEsS0FBSyxJQUFJLEVBQUc7UUFFdEIsT0FBTyxTQUFTLENBQUM7S0FDbEI7SUFFRCxJQUFJLFFBQVEsS0FBSyxjQUFjO1dBQzFCLFFBQVEsS0FBSyxjQUFjLEVBQUc7UUFFakMsT0FBTyxTQUFTLENBQUM7S0FDbEI7SUFFRCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUUsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBRSxJQUFJLFNBQVMsQ0FBQztBQUNyRSxDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWM7SUFFNUIsT0FBTyxTQUFTLENBQUMsVUFBVSxLQUFLLEtBQUssQ0FBQztBQUN4QyxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFzQixTQUErQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ1VTVE9NX01JTUVfVFlQRSxcbiAgRFJPUF9FRkZFQ1RTLFxuICBmaWx0ZXJFZmZlY3RzLFxuICBnZXRXZWxsS25vd25NaW1lVHlwZSxcbiAgSlNPTl9NSU1FX1RZUEUsXG4gIE1TSUVfTUlNRV9UWVBFXG59IGZyb20gXCIuL2RuZC11dGlsc1wiO1xuaW1wb3J0IHsgRHJvcEVmZmVjdCwgRWZmZWN0QWxsb3dlZCB9IGZyb20gXCIuL2RuZC10eXBlc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIERuZFN0YXRlIHtcbiAgaXNEcmFnZ2luZzpib29sZWFuO1xuICBkcm9wRWZmZWN0PzpEcm9wRWZmZWN0O1xuICBlZmZlY3RBbGxvd2VkPzpFZmZlY3RBbGxvd2VkO1xuICB0eXBlPzpzdHJpbmc7XG59XG5cbmNvbnN0IF9kbmRTdGF0ZTpEbmRTdGF0ZSA9IHtcbiAgaXNEcmFnZ2luZzogZmFsc2UsXG4gIGRyb3BFZmZlY3Q6IFwibm9uZVwiLFxuICBlZmZlY3RBbGxvd2VkOiBcImFsbFwiLFxuICB0eXBlOiB1bmRlZmluZWRcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydERyYWcoIGV2ZW50OkRyYWdFdmVudCwgZWZmZWN0QWxsb3dlZDpFZmZlY3RBbGxvd2VkLCB0eXBlOnN0cmluZyB8IHVuZGVmaW5lZCApIHtcblxuICBfZG5kU3RhdGUuaXNEcmFnZ2luZyA9IHRydWU7XG4gIF9kbmRTdGF0ZS5kcm9wRWZmZWN0ID0gXCJub25lXCI7XG4gIF9kbmRTdGF0ZS5lZmZlY3RBbGxvd2VkID0gZWZmZWN0QWxsb3dlZDtcbiAgX2RuZFN0YXRlLnR5cGUgPSB0eXBlO1xuXG4gIGlmKGV2ZW50LmRhdGFUcmFuc2Zlcikge1xuXG4gICAgZXZlbnQuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSBlZmZlY3RBbGxvd2VkO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmREcmFnKCkge1xuXG4gIF9kbmRTdGF0ZS5pc0RyYWdnaW5nID0gZmFsc2U7XG4gIF9kbmRTdGF0ZS5kcm9wRWZmZWN0ID0gdW5kZWZpbmVkO1xuICBfZG5kU3RhdGUuZWZmZWN0QWxsb3dlZCA9IHVuZGVmaW5lZDtcbiAgX2RuZFN0YXRlLnR5cGUgPSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXREcm9wRWZmZWN0KCBldmVudDpEcmFnRXZlbnQsIGRyb3BFZmZlY3Q6RHJvcEVmZmVjdCApIHtcblxuICBpZiggX2RuZFN0YXRlLmlzRHJhZ2dpbmcgPT09IHRydWUgKSB7XG5cbiAgICBfZG5kU3RhdGUuZHJvcEVmZmVjdCA9IGRyb3BFZmZlY3Q7XG4gIH1cblxuICBpZihldmVudC5kYXRhVHJhbnNmZXIpIHtcblxuICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gZHJvcEVmZmVjdDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RHJvcEVmZmVjdCggZXZlbnQ6RHJhZ0V2ZW50LCBlZmZlY3RBbGxvd2VkPzpFZmZlY3RBbGxvd2VkIHwgRHJvcEVmZmVjdCApOkRyb3BFZmZlY3Qge1xuXG4gIGNvbnN0IGRhdGFUcmFuc2ZlckVmZmVjdEFsbG93ZWQ6RWZmZWN0QWxsb3dlZCA9IChldmVudC5kYXRhVHJhbnNmZXIpID8gZXZlbnQuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgYXMgRWZmZWN0QWxsb3dlZCA6IFwidW5pbml0aWFsaXplZFwiO1xuXG4gIGxldCBlZmZlY3RzID0gZmlsdGVyRWZmZWN0cyggRFJPUF9FRkZFQ1RTLCBkYXRhVHJhbnNmZXJFZmZlY3RBbGxvd2VkICk7XG5cbiAgaWYoIF9kbmRTdGF0ZS5pc0RyYWdnaW5nID09PSB0cnVlICkge1xuXG4gICAgZWZmZWN0cyA9IGZpbHRlckVmZmVjdHMoIGVmZmVjdHMsIF9kbmRTdGF0ZS5lZmZlY3RBbGxvd2VkISApO1xuICB9XG5cbiAgaWYoIGVmZmVjdEFsbG93ZWQgKSB7XG5cbiAgICBlZmZlY3RzID0gZmlsdGVyRWZmZWN0cyggZWZmZWN0cywgZWZmZWN0QWxsb3dlZCApO1xuICB9XG5cbiAgLy8gTWFjT1MgYXV0b21hdGljYWxseSBmaWx0ZXJzIGRhdGFUcmFuc2Zlci5lZmZlY3RBbGxvd2VkIGRlcGVuZGluZyBvbiB0aGUgbW9kaWZpZXIga2V5cyxcbiAgLy8gdGhlcmVmb3JlIHRoZSBmb2xsb3dpbmcgbW9kaWZpZXIga2V5cyB3aWxsIG9ubHkgYWZmZWN0IG90aGVyIG9wZXJhdGluZyBzeXN0ZW1zLlxuICBpZiggZWZmZWN0cy5sZW5ndGggPT09IDAgKSB7XG5cbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH1cblxuICBpZiggZXZlbnQuY3RybEtleSAmJiBlZmZlY3RzLmluZGV4T2YoIFwiY29weVwiICkgIT09IC0xICkge1xuXG4gICAgcmV0dXJuIFwiY29weVwiO1xuICB9XG5cbiAgaWYoIGV2ZW50LmFsdEtleSAmJiBlZmZlY3RzLmluZGV4T2YoIFwibGlua1wiICkgIT09IC0xICkge1xuXG4gICAgcmV0dXJuIFwibGlua1wiO1xuICB9XG5cbiAgcmV0dXJuIGVmZmVjdHNbIDAgXSBhcyBEcm9wRWZmZWN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RG5kVHlwZSggZXZlbnQ6RHJhZ0V2ZW50ICk6c3RyaW5nIHwgdW5kZWZpbmVkIHtcblxuICBpZiggX2RuZFN0YXRlLmlzRHJhZ2dpbmcgPT09IHRydWUgKSB7XG5cbiAgICByZXR1cm4gX2RuZFN0YXRlLnR5cGU7XG4gIH1cblxuICBjb25zdCBtaW1lVHlwZSA9IGdldFdlbGxLbm93bk1pbWVUeXBlKCBldmVudCApO1xuXG4gIGlmKCBtaW1lVHlwZSA9PT0gbnVsbCApIHtcblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiggbWltZVR5cGUgPT09IE1TSUVfTUlNRV9UWVBFXG4gICAgfHwgbWltZVR5cGUgPT09IEpTT05fTUlNRV9UWVBFICkge1xuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiBtaW1lVHlwZS5zdWJzdHIoIENVU1RPTV9NSU1FX1RZUEUubGVuZ3RoICsgMSApIHx8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRXh0ZXJuYWxEcmFnKCk6Ym9vbGVhbiB7XG5cbiAgcmV0dXJuIF9kbmRTdGF0ZS5pc0RyYWdnaW5nID09PSBmYWxzZTtcbn1cblxuZXhwb3J0IGNvbnN0IGRuZFN0YXRlOlJlYWRvbmx5PERuZFN0YXRlPiA9IF9kbmRTdGF0ZSBhcyBSZWFkb25seTxEbmRTdGF0ZT47XG4iXX0=