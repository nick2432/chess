{"ast":null,"code":"import _get from \"/home/nikhil/Desktop/new chess/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/nikhil/Desktop/new chess/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/nikhil/Desktop/new chess/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/nikhil/Desktop/new chess/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/home/nikhil/Desktop/new chess/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/nikhil/Desktop/new chess/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * Protocol version.\n *\n * @public\n */\nexport var protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n  PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n  PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n  PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n  PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n  PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n  PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n  PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nexport var Encoder = /*#__PURE__*/function () {\n  /**\n   * Encoder constructor\n   *\n   * @param {function} replacer - custom replacer to pass down to JSON.parse\n   */\n  function Encoder(replacer) {\n    _classCallCheck(this, Encoder);\n    this.replacer = replacer;\n  }\n  /**\n   * Encode a packet as a single string if non-binary, or as a\n   * buffer sequence, depending on packet type.\n   *\n   * @param {Object} obj - packet object\n   */\n  _createClass(Encoder, [{\n    key: \"encode\",\n    value: function encode(obj) {\n      if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n        if (hasBinary(obj)) {\n          return this.encodeAsBinary({\n            type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,\n            nsp: obj.nsp,\n            data: obj.data,\n            id: obj.id\n          });\n        }\n      }\n      return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n  }, {\n    key: \"encodeAsString\",\n    value: function encodeAsString(obj) {\n      // first is type\n      var str = \"\" + obj.type;\n      // attachments if we have them\n      if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n        str += obj.attachments + \"-\";\n      }\n      // if we have a namespace other than `/`\n      // we append it followed by a comma `,`\n      if (obj.nsp && \"/\" !== obj.nsp) {\n        str += obj.nsp + \",\";\n      }\n      // immediately followed by the id\n      if (null != obj.id) {\n        str += obj.id;\n      }\n      // json data\n      if (null != obj.data) {\n        str += JSON.stringify(obj.data, this.replacer);\n      }\n      return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n  }, {\n    key: \"encodeAsBinary\",\n    value: function encodeAsBinary(obj) {\n      var deconstruction = deconstructPacket(obj);\n      var pack = this.encodeAsString(deconstruction.packet);\n      var buffers = deconstruction.buffers;\n      buffers.unshift(pack); // add packet info to beginning of data list\n      return buffers; // write all the buffers\n    }\n  }]);\n  return Encoder;\n}();\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport var Decoder = /*#__PURE__*/function (_Emitter) {\n  _inherits(Decoder, _Emitter);\n  var _super = _createSuper(Decoder);\n  /**\n   * Decoder constructor\n   *\n   * @param {function} reviver - custom reviver to pass down to JSON.stringify\n   */\n  function Decoder(reviver) {\n    var _this;\n    _classCallCheck(this, Decoder);\n    _this = _super.call(this);\n    _this.reviver = reviver;\n    return _this;\n  }\n  /**\n   * Decodes an encoded packet string into packet JSON.\n   *\n   * @param {String} obj - encoded packet\n   */\n  _createClass(Decoder, [{\n    key: \"add\",\n    value: function add(obj) {\n      var packet;\n      if (typeof obj === \"string\") {\n        if (this.reconstructor) {\n          throw new Error(\"got plaintext data when reconstructing a packet\");\n        }\n        packet = this.decodeString(obj);\n        var isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n        if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n          packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n          // binary packet's json\n          this.reconstructor = new BinaryReconstructor(packet);\n          // no attachments, labeled binary but no binary data to follow\n          if (packet.attachments === 0) {\n            _get(_getPrototypeOf(Decoder.prototype), \"emitReserved\", this).call(this, \"decoded\", packet);\n          }\n        } else {\n          // non-binary full packet\n          _get(_getPrototypeOf(Decoder.prototype), \"emitReserved\", this).call(this, \"decoded\", packet);\n        }\n      } else if (isBinary(obj) || obj.base64) {\n        // raw binary data\n        if (!this.reconstructor) {\n          throw new Error(\"got binary data when not reconstructing a packet\");\n        } else {\n          packet = this.reconstructor.takeBinaryData(obj);\n          if (packet) {\n            // received final buffer\n            this.reconstructor = null;\n            _get(_getPrototypeOf(Decoder.prototype), \"emitReserved\", this).call(this, \"decoded\", packet);\n          }\n        }\n      } else {\n        throw new Error(\"Unknown type: \" + obj);\n      }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n  }, {\n    key: \"decodeString\",\n    value: function decodeString(str) {\n      var i = 0;\n      // look up type\n      var p = {\n        type: Number(str.charAt(0))\n      };\n      if (PacketType[p.type] === undefined) {\n        throw new Error(\"unknown packet type \" + p.type);\n      }\n      // look up attachments if type binary\n      if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n        var start = i + 1;\n        while (str.charAt(++i) !== \"-\" && i != str.length) {}\n        var buf = str.substring(start, i);\n        if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n          throw new Error(\"Illegal attachments\");\n        }\n        p.attachments = Number(buf);\n      }\n      // look up namespace (if any)\n      if (\"/\" === str.charAt(i + 1)) {\n        var _start = i + 1;\n        while (++i) {\n          var c = str.charAt(i);\n          if (\",\" === c) break;\n          if (i === str.length) break;\n        }\n        p.nsp = str.substring(_start, i);\n      } else {\n        p.nsp = \"/\";\n      }\n      // look up id\n      var next = str.charAt(i + 1);\n      if (\"\" !== next && Number(next) == next) {\n        var _start2 = i + 1;\n        while (++i) {\n          var _c = str.charAt(i);\n          if (null == _c || Number(_c) != _c) {\n            --i;\n            break;\n          }\n          if (i === str.length) break;\n        }\n        p.id = Number(str.substring(_start2, i + 1));\n      }\n      // look up json data\n      if (str.charAt(++i)) {\n        var payload = this.tryParse(str.substr(i));\n        if (Decoder.isPayloadValid(p.type, payload)) {\n          p.data = payload;\n        } else {\n          throw new Error(\"invalid payload\");\n        }\n      }\n      return p;\n    }\n  }, {\n    key: \"tryParse\",\n    value: function tryParse(str) {\n      try {\n        return JSON.parse(str, this.reviver);\n      } catch (e) {\n        return false;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value:\n    /**\n     * Deallocates a parser's resources\n     */\n    function destroy() {\n      if (this.reconstructor) {\n        this.reconstructor.finishedReconstruction();\n        this.reconstructor = null;\n      }\n    }\n  }], [{\n    key: \"isPayloadValid\",\n    value: function isPayloadValid(type, payload) {\n      switch (type) {\n        case PacketType.CONNECT:\n          return typeof payload === \"object\";\n        case PacketType.DISCONNECT:\n          return payload === undefined;\n        case PacketType.CONNECT_ERROR:\n          return typeof payload === \"string\" || typeof payload === \"object\";\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          return Array.isArray(payload) && payload.length > 0;\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          return Array.isArray(payload);\n      }\n    }\n  }]);\n  return Decoder;\n}(Emitter);\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nvar BinaryReconstructor = /*#__PURE__*/function () {\n  function BinaryReconstructor(packet) {\n    _classCallCheck(this, BinaryReconstructor);\n    this.packet = packet;\n    this.buffers = [];\n    this.reconPack = packet;\n  }\n  /**\n   * Method to be called when binary data received from connection\n   * after a BINARY_EVENT packet.\n   *\n   * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n   * @return {null | Object} returns null if more binary data is expected or\n   *   a reconstructed packet object if all buffers have been received.\n   */\n  _createClass(BinaryReconstructor, [{\n    key: \"takeBinaryData\",\n    value: function takeBinaryData(binData) {\n      this.buffers.push(binData);\n      if (this.buffers.length === this.reconPack.attachments) {\n        // done with buffer list\n        var packet = reconstructPacket(this.reconPack, this.buffers);\n        this.finishedReconstruction();\n        return packet;\n      }\n      return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n  }, {\n    key: \"finishedReconstruction\",\n    value: function finishedReconstruction() {\n      this.reconPack = null;\n      this.buffers = [];\n    }\n  }]);\n  return BinaryReconstructor;\n}();","map":{"version":3,"names":["Emitter","deconstructPacket","reconstructPacket","isBinary","hasBinary","protocol","PacketType","Encoder","replacer","_classCallCheck","_createClass","key","value","encode","obj","type","EVENT","ACK","encodeAsBinary","BINARY_EVENT","BINARY_ACK","nsp","data","id","encodeAsString","str","attachments","JSON","stringify","deconstruction","pack","packet","buffers","unshift","Decoder","_Emitter","_inherits","_super","_createSuper","reviver","_this","call","add","reconstructor","Error","decodeString","isBinaryEvent","BinaryReconstructor","_get","_getPrototypeOf","prototype","base64","takeBinaryData","i","p","Number","charAt","undefined","start","length","buf","substring","c","next","payload","tryParse","substr","isPayloadValid","parse","e","destroy","finishedReconstruction","CONNECT","DISCONNECT","CONNECT_ERROR","Array","isArray","reconPack","binData","push"],"sources":["/home/nikhil/Desktop/new chess/node_modules/socket.io-parser/build/esm/index.js"],"sourcesContent":["import { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * Protocol version.\n *\n * @public\n */\nexport const protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nexport class Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n        this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (hasBinary(obj)) {\n                return this.encodeAsBinary({\n                    type: obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK,\n                    nsp: obj.nsp,\n                    data: obj.data,\n                    id: obj.id,\n                });\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data, this.replacer);\n        }\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport class Decoder extends Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n        super();\n        this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            if (this.reconstructor) {\n                throw new Error(\"got plaintext data when reconstructing a packet\");\n            }\n            packet = this.decodeString(obj);\n            const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n            if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n                packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if (isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = this.tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        return p;\n    }\n    tryParse(str) {\n        try {\n            return JSON.parse(str, this.reviver);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return typeof payload === \"object\";\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || typeof payload === \"object\";\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return Array.isArray(payload) && payload.length > 0;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n            this.reconstructor = null;\n        }\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n"],"mappings":";;;;;;AAAA,SAASA,OAAO,QAAQ,8BAA8B;AACtD,SAASC,iBAAiB,EAAEC,iBAAiB,QAAQ,aAAa;AAClE,SAASC,QAAQ,EAAEC,SAAS,QAAQ,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,QAAQ,GAAG,CAAC;AACzB,OAAO,IAAIC,UAAU;AACrB,CAAC,UAAUA,UAAU,EAAE;EACnBA,UAAU,CAACA,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;EACjDA,UAAU,CAACA,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY;EACvDA,UAAU,CAACA,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;EAC7CA,UAAU,CAACA,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;EACzCA,UAAU,CAACA,UAAU,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,GAAG,eAAe;EAC7DA,UAAU,CAACA,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAAG,cAAc;EAC3DA,UAAU,CAACA,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY;AAC3D,CAAC,EAAEA,UAAU,KAAKA,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;AACnC;AACA;AACA;AACA,WAAaC,OAAO;EAChB;AACJ;AACA;AACA;AACA;EACI,SAAAA,QAAYC,QAAQ,EAAE;IAAAC,eAAA,OAAAF,OAAA;IAClB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC5B;EACA;AACJ;AACA;AACA;AACA;AACA;EALIE,YAAA,CAAAH,OAAA;IAAAI,GAAA;IAAAC,KAAA,EAMA,SAAAC,OAAOC,GAAG,EAAE;MACR,IAAIA,GAAG,CAACC,IAAI,KAAKT,UAAU,CAACU,KAAK,IAAIF,GAAG,CAACC,IAAI,KAAKT,UAAU,CAACW,GAAG,EAAE;QAC9D,IAAIb,SAAS,CAACU,GAAG,CAAC,EAAE;UAChB,OAAO,IAAI,CAACI,cAAc,CAAC;YACvBH,IAAI,EAAED,GAAG,CAACC,IAAI,KAAKT,UAAU,CAACU,KAAK,GAC7BV,UAAU,CAACa,YAAY,GACvBb,UAAU,CAACc,UAAU;YAC3BC,GAAG,EAAEP,GAAG,CAACO,GAAG;YACZC,IAAI,EAAER,GAAG,CAACQ,IAAI;YACdC,EAAE,EAAET,GAAG,CAACS;UACZ,CAAC,CAAC;QACN;MACJ;MACA,OAAO,CAAC,IAAI,CAACC,cAAc,CAACV,GAAG,CAAC,CAAC;IACrC;IACA;AACJ;AACA;EAFI;IAAAH,GAAA;IAAAC,KAAA,EAGA,SAAAY,eAAeV,GAAG,EAAE;MAChB;MACA,IAAIW,GAAG,GAAG,EAAE,GAAGX,GAAG,CAACC,IAAI;MACvB;MACA,IAAID,GAAG,CAACC,IAAI,KAAKT,UAAU,CAACa,YAAY,IACpCL,GAAG,CAACC,IAAI,KAAKT,UAAU,CAACc,UAAU,EAAE;QACpCK,GAAG,IAAIX,GAAG,CAACY,WAAW,GAAG,GAAG;MAChC;MACA;MACA;MACA,IAAIZ,GAAG,CAACO,GAAG,IAAI,GAAG,KAAKP,GAAG,CAACO,GAAG,EAAE;QAC5BI,GAAG,IAAIX,GAAG,CAACO,GAAG,GAAG,GAAG;MACxB;MACA;MACA,IAAI,IAAI,IAAIP,GAAG,CAACS,EAAE,EAAE;QAChBE,GAAG,IAAIX,GAAG,CAACS,EAAE;MACjB;MACA;MACA,IAAI,IAAI,IAAIT,GAAG,CAACQ,IAAI,EAAE;QAClBG,GAAG,IAAIE,IAAI,CAACC,SAAS,CAACd,GAAG,CAACQ,IAAI,EAAE,IAAI,CAACd,QAAQ,CAAC;MAClD;MACA,OAAOiB,GAAG;IACd;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAAd,GAAA;IAAAC,KAAA,EAKA,SAAAM,eAAeJ,GAAG,EAAE;MAChB,IAAMe,cAAc,GAAG5B,iBAAiB,CAACa,GAAG,CAAC;MAC7C,IAAMgB,IAAI,GAAG,IAAI,CAACN,cAAc,CAACK,cAAc,CAACE,MAAM,CAAC;MACvD,IAAMC,OAAO,GAAGH,cAAc,CAACG,OAAO;MACtCA,OAAO,CAACC,OAAO,CAACH,IAAI,CAAC,CAAC,CAAC;MACvB,OAAOE,OAAO,CAAC,CAAC;IACpB;EAAC;EAAA,OAAAzB,OAAA;AAAA;AAEL;AACA;AACA;AACA;AACA;AACA,WAAa2B,OAAO,0BAAAC,QAAA;EAAAC,SAAA,CAAAF,OAAA,EAAAC,QAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,OAAA;EAChB;AACJ;AACA;AACA;AACA;EACI,SAAAA,QAAYK,OAAO,EAAE;IAAA,IAAAC,KAAA;IAAA/B,eAAA,OAAAyB,OAAA;IACjBM,KAAA,GAAAH,MAAA,CAAAI,IAAA;IACAD,KAAA,CAAKD,OAAO,GAAGA,OAAO;IAAC,OAAAC,KAAA;EAC3B;EACA;AACJ;AACA;AACA;AACA;EAJI9B,YAAA,CAAAwB,OAAA;IAAAvB,GAAA;IAAAC,KAAA,EAKA,SAAA8B,IAAI5B,GAAG,EAAE;MACL,IAAIiB,MAAM;MACV,IAAI,OAAOjB,GAAG,KAAK,QAAQ,EAAE;QACzB,IAAI,IAAI,CAAC6B,aAAa,EAAE;UACpB,MAAM,IAAIC,KAAK,CAAC,iDAAiD,CAAC;QACtE;QACAb,MAAM,GAAG,IAAI,CAACc,YAAY,CAAC/B,GAAG,CAAC;QAC/B,IAAMgC,aAAa,GAAGf,MAAM,CAAChB,IAAI,KAAKT,UAAU,CAACa,YAAY;QAC7D,IAAI2B,aAAa,IAAIf,MAAM,CAAChB,IAAI,KAAKT,UAAU,CAACc,UAAU,EAAE;UACxDW,MAAM,CAAChB,IAAI,GAAG+B,aAAa,GAAGxC,UAAU,CAACU,KAAK,GAAGV,UAAU,CAACW,GAAG;UAC/D;UACA,IAAI,CAAC0B,aAAa,GAAG,IAAII,mBAAmB,CAAChB,MAAM,CAAC;UACpD;UACA,IAAIA,MAAM,CAACL,WAAW,KAAK,CAAC,EAAE;YAC1BsB,IAAA,CAAAC,eAAA,CAAAf,OAAA,CAAAgB,SAAA,yBAAAT,IAAA,OAAmB,SAAS,EAAEV,MAAM;UACxC;QACJ,CAAC,MACI;UACD;UACAiB,IAAA,CAAAC,eAAA,CAAAf,OAAA,CAAAgB,SAAA,yBAAAT,IAAA,OAAmB,SAAS,EAAEV,MAAM;QACxC;MACJ,CAAC,MACI,IAAI5B,QAAQ,CAACW,GAAG,CAAC,IAAIA,GAAG,CAACqC,MAAM,EAAE;QAClC;QACA,IAAI,CAAC,IAAI,CAACR,aAAa,EAAE;UACrB,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;QACvE,CAAC,MACI;UACDb,MAAM,GAAG,IAAI,CAACY,aAAa,CAACS,cAAc,CAACtC,GAAG,CAAC;UAC/C,IAAIiB,MAAM,EAAE;YACR;YACA,IAAI,CAACY,aAAa,GAAG,IAAI;YACzBK,IAAA,CAAAC,eAAA,CAAAf,OAAA,CAAAgB,SAAA,yBAAAT,IAAA,OAAmB,SAAS,EAAEV,MAAM;UACxC;QACJ;MACJ,CAAC,MACI;QACD,MAAM,IAAIa,KAAK,CAAC,gBAAgB,GAAG9B,GAAG,CAAC;MAC3C;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAH,GAAA;IAAAC,KAAA,EAMA,SAAAiC,aAAapB,GAAG,EAAE;MACd,IAAI4B,CAAC,GAAG,CAAC;MACT;MACA,IAAMC,CAAC,GAAG;QACNvC,IAAI,EAAEwC,MAAM,CAAC9B,GAAG,CAAC+B,MAAM,CAAC,CAAC,CAAC;MAC9B,CAAC;MACD,IAAIlD,UAAU,CAACgD,CAAC,CAACvC,IAAI,CAAC,KAAK0C,SAAS,EAAE;QAClC,MAAM,IAAIb,KAAK,CAAC,sBAAsB,GAAGU,CAAC,CAACvC,IAAI,CAAC;MACpD;MACA;MACA,IAAIuC,CAAC,CAACvC,IAAI,KAAKT,UAAU,CAACa,YAAY,IAClCmC,CAAC,CAACvC,IAAI,KAAKT,UAAU,CAACc,UAAU,EAAE;QAClC,IAAMsC,KAAK,GAAGL,CAAC,GAAG,CAAC;QACnB,OAAO5B,GAAG,CAAC+B,MAAM,CAAC,EAAEH,CAAC,CAAC,KAAK,GAAG,IAAIA,CAAC,IAAI5B,GAAG,CAACkC,MAAM,EAAE,CAAE;QACrD,IAAMC,GAAG,GAAGnC,GAAG,CAACoC,SAAS,CAACH,KAAK,EAAEL,CAAC,CAAC;QACnC,IAAIO,GAAG,IAAIL,MAAM,CAACK,GAAG,CAAC,IAAInC,GAAG,CAAC+B,MAAM,CAACH,CAAC,CAAC,KAAK,GAAG,EAAE;UAC7C,MAAM,IAAIT,KAAK,CAAC,qBAAqB,CAAC;QAC1C;QACAU,CAAC,CAAC5B,WAAW,GAAG6B,MAAM,CAACK,GAAG,CAAC;MAC/B;MACA;MACA,IAAI,GAAG,KAAKnC,GAAG,CAAC+B,MAAM,CAACH,CAAC,GAAG,CAAC,CAAC,EAAE;QAC3B,IAAMK,MAAK,GAAGL,CAAC,GAAG,CAAC;QACnB,OAAO,EAAEA,CAAC,EAAE;UACR,IAAMS,CAAC,GAAGrC,GAAG,CAAC+B,MAAM,CAACH,CAAC,CAAC;UACvB,IAAI,GAAG,KAAKS,CAAC,EACT;UACJ,IAAIT,CAAC,KAAK5B,GAAG,CAACkC,MAAM,EAChB;QACR;QACAL,CAAC,CAACjC,GAAG,GAAGI,GAAG,CAACoC,SAAS,CAACH,MAAK,EAAEL,CAAC,CAAC;MACnC,CAAC,MACI;QACDC,CAAC,CAACjC,GAAG,GAAG,GAAG;MACf;MACA;MACA,IAAM0C,IAAI,GAAGtC,GAAG,CAAC+B,MAAM,CAACH,CAAC,GAAG,CAAC,CAAC;MAC9B,IAAI,EAAE,KAAKU,IAAI,IAAIR,MAAM,CAACQ,IAAI,CAAC,IAAIA,IAAI,EAAE;QACrC,IAAML,OAAK,GAAGL,CAAC,GAAG,CAAC;QACnB,OAAO,EAAEA,CAAC,EAAE;UACR,IAAMS,EAAC,GAAGrC,GAAG,CAAC+B,MAAM,CAACH,CAAC,CAAC;UACvB,IAAI,IAAI,IAAIS,EAAC,IAAIP,MAAM,CAACO,EAAC,CAAC,IAAIA,EAAC,EAAE;YAC7B,EAAET,CAAC;YACH;UACJ;UACA,IAAIA,CAAC,KAAK5B,GAAG,CAACkC,MAAM,EAChB;QACR;QACAL,CAAC,CAAC/B,EAAE,GAAGgC,MAAM,CAAC9B,GAAG,CAACoC,SAAS,CAACH,OAAK,EAAEL,CAAC,GAAG,CAAC,CAAC,CAAC;MAC9C;MACA;MACA,IAAI5B,GAAG,CAAC+B,MAAM,CAAC,EAAEH,CAAC,CAAC,EAAE;QACjB,IAAMW,OAAO,GAAG,IAAI,CAACC,QAAQ,CAACxC,GAAG,CAACyC,MAAM,CAACb,CAAC,CAAC,CAAC;QAC5C,IAAInB,OAAO,CAACiC,cAAc,CAACb,CAAC,CAACvC,IAAI,EAAEiD,OAAO,CAAC,EAAE;UACzCV,CAAC,CAAChC,IAAI,GAAG0C,OAAO;QACpB,CAAC,MACI;UACD,MAAM,IAAIpB,KAAK,CAAC,iBAAiB,CAAC;QACtC;MACJ;MACA,OAAOU,CAAC;IACZ;EAAC;IAAA3C,GAAA;IAAAC,KAAA,EACD,SAAAqD,SAASxC,GAAG,EAAE;MACV,IAAI;QACA,OAAOE,IAAI,CAACyC,KAAK,CAAC3C,GAAG,EAAE,IAAI,CAACc,OAAO,CAAC;MACxC,CAAC,CACD,OAAO8B,CAAC,EAAE;QACN,OAAO,KAAK;MAChB;IACJ;EAAC;IAAA1D,GAAA;IAAAC,KAAA;IAiBD;AACJ;AACA;IACI,SAAA0D,QAAA,EAAU;MACN,IAAI,IAAI,CAAC3B,aAAa,EAAE;QACpB,IAAI,CAACA,aAAa,CAAC4B,sBAAsB,EAAE;QAC3C,IAAI,CAAC5B,aAAa,GAAG,IAAI;MAC7B;IACJ;EAAC;IAAAhC,GAAA;IAAAC,KAAA,EAxBD,SAAAuD,eAAsBpD,IAAI,EAAEiD,OAAO,EAAE;MACjC,QAAQjD,IAAI;QACR,KAAKT,UAAU,CAACkE,OAAO;UACnB,OAAO,OAAOR,OAAO,KAAK,QAAQ;QACtC,KAAK1D,UAAU,CAACmE,UAAU;UACtB,OAAOT,OAAO,KAAKP,SAAS;QAChC,KAAKnD,UAAU,CAACoE,aAAa;UACzB,OAAO,OAAOV,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,KAAK,QAAQ;QACrE,KAAK1D,UAAU,CAACU,KAAK;QACrB,KAAKV,UAAU,CAACa,YAAY;UACxB,OAAOwD,KAAK,CAACC,OAAO,CAACZ,OAAO,CAAC,IAAIA,OAAO,CAACL,MAAM,GAAG,CAAC;QACvD,KAAKrD,UAAU,CAACW,GAAG;QACnB,KAAKX,UAAU,CAACc,UAAU;UACtB,OAAOuD,KAAK,CAACC,OAAO,CAACZ,OAAO,CAAC;MAAC;IAE1C;EAAC;EAAA,OAAA9B,OAAA;AAAA,EAlJwBlC,OAAO;AA6JpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,IAQM+C,mBAAmB;EACrB,SAAAA,oBAAYhB,MAAM,EAAE;IAAAtB,eAAA,OAAAsC,mBAAA;IAChB,IAAI,CAAChB,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB,IAAI,CAAC6C,SAAS,GAAG9C,MAAM;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAPIrB,YAAA,CAAAqC,mBAAA;IAAApC,GAAA;IAAAC,KAAA,EAQA,SAAAwC,eAAe0B,OAAO,EAAE;MACpB,IAAI,CAAC9C,OAAO,CAAC+C,IAAI,CAACD,OAAO,CAAC;MAC1B,IAAI,IAAI,CAAC9C,OAAO,CAAC2B,MAAM,KAAK,IAAI,CAACkB,SAAS,CAACnD,WAAW,EAAE;QACpD;QACA,IAAMK,MAAM,GAAG7B,iBAAiB,CAAC,IAAI,CAAC2E,SAAS,EAAE,IAAI,CAAC7C,OAAO,CAAC;QAC9D,IAAI,CAACuC,sBAAsB,EAAE;QAC7B,OAAOxC,MAAM;MACjB;MACA,OAAO,IAAI;IACf;IACA;AACJ;AACA;EAFI;IAAApB,GAAA;IAAAC,KAAA,EAGA,SAAA2D,uBAAA,EAAyB;MACrB,IAAI,CAACM,SAAS,GAAG,IAAI;MACrB,IAAI,CAAC7C,OAAO,GAAG,EAAE;IACrB;EAAC;EAAA,OAAAe,mBAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}