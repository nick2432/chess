{"ast":null,"code":"import _classCallCheck from \"/home/nikhil/Desktop/new chess/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/nikhil/Desktop/new chess/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/nikhil/Desktop/new chess/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/nikhil/Desktop/new chess/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/nikhil/Desktop/new chess/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { transports } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nexport var Socket = /*#__PURE__*/function (_Emitter) {\n  _inherits(Socket, _Emitter);\n  var _super = _createSuper(Socket);\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri - uri or options\n   * @param {Object} opts - options\n   */\n  function Socket(uri) {\n    var _this;\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Socket);\n    _this = _super.call(this);\n    _this.writeBuffer = [];\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n    if (uri) {\n      uri = parse(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = parse(opts.host).host;\n    }\n    installTimerFunctions(_assertThisInitialized(_this), opts);\n    _this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = _this.secure ? \"443\" : \"80\";\n    }\n    _this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    _this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : _this.secure ? \"443\" : \"80\");\n    _this.transports = opts.transports || [\"polling\", \"websocket\"];\n    _this.writeBuffer = [];\n    _this.prevBufferLen = 0;\n    _this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      addTrailingSlash: true,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: true\n    }, opts);\n    _this.opts.path = _this.opts.path.replace(/\\/$/, \"\") + (_this.opts.addTrailingSlash ? \"/\" : \"\");\n    if (typeof _this.opts.query === \"string\") {\n      _this.opts.query = decode(_this.opts.query);\n    }\n    // set on handshake\n    _this.id = null;\n    _this.upgrades = null;\n    _this.pingInterval = null;\n    _this.pingTimeout = null;\n    // set on heartbeat\n    _this.pingTimeoutTimer = null;\n    if (typeof addEventListener === \"function\") {\n      if (_this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        _this.beforeunloadEventListener = function () {\n          if (_this.transport) {\n            // silently close the transport\n            _this.transport.removeAllListeners();\n            _this.transport.close();\n          }\n        };\n        addEventListener(\"beforeunload\", _this.beforeunloadEventListener, false);\n      }\n      if (_this.hostname !== \"localhost\") {\n        _this.offlineEventListener = function () {\n          _this.onClose(\"transport close\", {\n            description: \"network connection lost\"\n          });\n        };\n        addEventListener(\"offline\", _this.offlineEventListener, false);\n      }\n    }\n    _this.open();\n    return _this;\n  }\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} name - transport name\n   * @return {Transport}\n   * @private\n   */\n  _createClass(Socket, [{\n    key: \"createTransport\",\n    value: function createTransport(name) {\n      var query = Object.assign({}, this.opts.query);\n      // append engine.io protocol identifier\n      query.EIO = protocol;\n      // transport name\n      query.transport = name;\n      // session id if we already have one\n      if (this.id) query.sid = this.id;\n      var opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n        query: query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      });\n      return new transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this2 = this;\n      var transport;\n      if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n        transport = \"websocket\";\n      } else if (0 === this.transports.length) {\n        // Emit error on next tick so it can be listened to\n        this.setTimeoutFn(function () {\n          _this2.emitReserved(\"error\", \"No transports available\");\n        }, 0);\n        return;\n      } else {\n        transport = this.transports[0];\n      }\n      this.readyState = \"opening\";\n      // Retry with the next transport if the transport is disabled (jsonp: false)\n      try {\n        transport = this.createTransport(transport);\n      } catch (e) {\n        this.transports.shift();\n        this.open();\n        return;\n      }\n      transport.open();\n      this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n  }, {\n    key: \"setTransport\",\n    value: function setTransport(transport) {\n      var _this3 = this;\n      if (this.transport) {\n        this.transport.removeAllListeners();\n      }\n      // set up transport\n      this.transport = transport;\n      // set up transport listeners\n      transport.on(\"drain\", this.onDrain.bind(this)).on(\"packet\", this.onPacket.bind(this)).on(\"error\", this.onError.bind(this)).on(\"close\", function (reason) {\n        return _this3.onClose(\"transport close\", reason);\n      });\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n  }, {\n    key: \"probe\",\n    value: function probe(name) {\n      var _this4 = this;\n      var transport = this.createTransport(name);\n      var failed = false;\n      Socket.priorWebsocketSuccess = false;\n      var onTransportOpen = function onTransportOpen() {\n        if (failed) return;\n        transport.send([{\n          type: \"ping\",\n          data: \"probe\"\n        }]);\n        transport.once(\"packet\", function (msg) {\n          if (failed) return;\n          if (\"pong\" === msg.type && \"probe\" === msg.data) {\n            _this4.upgrading = true;\n            _this4.emitReserved(\"upgrading\", transport);\n            if (!transport) return;\n            Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n            _this4.transport.pause(function () {\n              if (failed) return;\n              if (\"closed\" === _this4.readyState) return;\n              cleanup();\n              _this4.setTransport(transport);\n              transport.send([{\n                type: \"upgrade\"\n              }]);\n              _this4.emitReserved(\"upgrade\", transport);\n              transport = null;\n              _this4.upgrading = false;\n              _this4.flush();\n            });\n          } else {\n            var err = new Error(\"probe error\");\n            // @ts-ignore\n            err.transport = transport.name;\n            _this4.emitReserved(\"upgradeError\", err);\n          }\n        });\n      };\n      function freezeTransport() {\n        if (failed) return;\n        // Any callback called by transport should be ignored since now\n        failed = true;\n        cleanup();\n        transport.close();\n        transport = null;\n      }\n      // Handle any error that happens while probing\n      var onerror = function onerror(err) {\n        var error = new Error(\"probe error: \" + err);\n        // @ts-ignore\n        error.transport = transport.name;\n        freezeTransport();\n        _this4.emitReserved(\"upgradeError\", error);\n      };\n      function onTransportClose() {\n        onerror(\"transport closed\");\n      }\n      // When the socket is closed while we're probing\n      function onclose() {\n        onerror(\"socket closed\");\n      }\n      // When the socket is upgraded while we're probing\n      function onupgrade(to) {\n        if (transport && to.name !== transport.name) {\n          freezeTransport();\n        }\n      }\n      // Remove all listeners on the transport and on self\n      var cleanup = function cleanup() {\n        transport.removeListener(\"open\", onTransportOpen);\n        transport.removeListener(\"error\", onerror);\n        transport.removeListener(\"close\", onTransportClose);\n        _this4.off(\"close\", onclose);\n        _this4.off(\"upgrading\", onupgrade);\n      };\n      transport.once(\"open\", onTransportOpen);\n      transport.once(\"error\", onerror);\n      transport.once(\"close\", onTransportClose);\n      this.once(\"close\", onclose);\n      this.once(\"upgrading\", onupgrade);\n      transport.open();\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n  }, {\n    key: \"onOpen\",\n    value: function onOpen() {\n      this.readyState = \"open\";\n      Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n      this.emitReserved(\"open\");\n      this.flush();\n      // we check for `readyState` in case an `open`\n      // listener already closed the socket\n      if (\"open\" === this.readyState && this.opts.upgrade) {\n        var i = 0;\n        var l = this.upgrades.length;\n        for (; i < l; i++) {\n          this.probe(this.upgrades[i]);\n        }\n      }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n  }, {\n    key: \"onPacket\",\n    value: function onPacket(packet) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        this.emitReserved(\"packet\", packet);\n        // Socket is live - any packet counts\n        this.emitReserved(\"heartbeat\");\n        switch (packet.type) {\n          case \"open\":\n            this.onHandshake(JSON.parse(packet.data));\n            break;\n          case \"ping\":\n            this.resetPingTimeout();\n            this.sendPacket(\"pong\");\n            this.emitReserved(\"ping\");\n            this.emitReserved(\"pong\");\n            break;\n          case \"error\":\n            var err = new Error(\"server error\");\n            // @ts-ignore\n            err.code = packet.data;\n            this.onError(err);\n            break;\n          case \"message\":\n            this.emitReserved(\"data\", packet.data);\n            this.emitReserved(\"message\", packet.data);\n            break;\n        }\n      } else {}\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n  }, {\n    key: \"onHandshake\",\n    value: function onHandshake(data) {\n      this.emitReserved(\"handshake\", data);\n      this.id = data.sid;\n      this.transport.query.sid = data.sid;\n      this.upgrades = this.filterUpgrades(data.upgrades);\n      this.pingInterval = data.pingInterval;\n      this.pingTimeout = data.pingTimeout;\n      this.maxPayload = data.maxPayload;\n      this.onOpen();\n      // In case open handler closes socket\n      if (\"closed\" === this.readyState) return;\n      this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n  }, {\n    key: \"resetPingTimeout\",\n    value: function resetPingTimeout() {\n      var _this5 = this;\n      this.clearTimeoutFn(this.pingTimeoutTimer);\n      this.pingTimeoutTimer = this.setTimeoutFn(function () {\n        _this5.onClose(\"ping timeout\");\n      }, this.pingInterval + this.pingTimeout);\n      if (this.opts.autoUnref) {\n        this.pingTimeoutTimer.unref();\n      }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n  }, {\n    key: \"onDrain\",\n    value: function onDrain() {\n      this.writeBuffer.splice(0, this.prevBufferLen);\n      // setting prevBufferLen = 0 is very important\n      // for example, when upgrading, upgrade packet is sent over,\n      // and a nonzero prevBufferLen could cause problems on `drain`\n      this.prevBufferLen = 0;\n      if (0 === this.writeBuffer.length) {\n        this.emitReserved(\"drain\");\n      } else {\n        this.flush();\n      }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n        var packets = this.getWritablePackets();\n        this.transport.send(packets);\n        // keep track of current length of writeBuffer\n        // splice writeBuffer and callbackBuffer on `drain`\n        this.prevBufferLen = packets.length;\n        this.emitReserved(\"flush\");\n      }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n  }, {\n    key: \"getWritablePackets\",\n    value: function getWritablePackets() {\n      var shouldCheckPayloadSize = this.maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n      if (!shouldCheckPayloadSize) {\n        return this.writeBuffer;\n      }\n      var payloadSize = 1; // first packet type\n      for (var i = 0; i < this.writeBuffer.length; i++) {\n        var data = this.writeBuffer[i].data;\n        if (data) {\n          payloadSize += byteLength(data);\n        }\n        if (i > 0 && payloadSize > this.maxPayload) {\n          return this.writeBuffer.slice(0, i);\n        }\n        payloadSize += 2; // separator + packet type\n      }\n\n      return this.writeBuffer;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @return {Socket} for chaining.\n     */\n  }, {\n    key: \"write\",\n    value: function write(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n  }, {\n    key: \"send\",\n    value: function send(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n  }, {\n    key: \"sendPacket\",\n    value: function sendPacket(type, data, options, fn) {\n      if (\"function\" === typeof data) {\n        fn = data;\n        data = undefined;\n      }\n      if (\"function\" === typeof options) {\n        fn = options;\n        options = null;\n      }\n      if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n        return;\n      }\n      options = options || {};\n      options.compress = false !== options.compress;\n      var packet = {\n        type: type,\n        data: data,\n        options: options\n      };\n      this.emitReserved(\"packetCreate\", packet);\n      this.writeBuffer.push(packet);\n      if (fn) this.once(\"flush\", fn);\n      this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this6 = this;\n      var close = function close() {\n        _this6.onClose(\"forced close\");\n        _this6.transport.close();\n      };\n      var cleanupAndClose = function cleanupAndClose() {\n        _this6.off(\"upgrade\", cleanupAndClose);\n        _this6.off(\"upgradeError\", cleanupAndClose);\n        close();\n      };\n      var waitForUpgrade = function waitForUpgrade() {\n        // wait for upgrade to finish since we can't send packets while pausing a transport\n        _this6.once(\"upgrade\", cleanupAndClose);\n        _this6.once(\"upgradeError\", cleanupAndClose);\n      };\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.readyState = \"closing\";\n        if (this.writeBuffer.length) {\n          this.once(\"drain\", function () {\n            if (_this6.upgrading) {\n              waitForUpgrade();\n            } else {\n              close();\n            }\n          });\n        } else if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      }\n      return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n  }, {\n    key: \"onError\",\n    value: function onError(err) {\n      Socket.priorWebsocketSuccess = false;\n      this.emitReserved(\"error\", err);\n      this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n  }, {\n    key: \"onClose\",\n    value: function onClose(reason, description) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        // clear timers\n        this.clearTimeoutFn(this.pingTimeoutTimer);\n        // stop event from firing again for transport\n        this.transport.removeAllListeners(\"close\");\n        // ensure transport won't stay open\n        this.transport.close();\n        // ignore further transport communication\n        this.transport.removeAllListeners();\n        if (typeof removeEventListener === \"function\") {\n          removeEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n          removeEventListener(\"offline\", this.offlineEventListener, false);\n        }\n        // set ready state\n        this.readyState = \"closed\";\n        // clear session id\n        this.id = null;\n        // emit close event\n        this.emitReserved(\"close\", reason, description);\n        // clean buffers after, so users can still\n        // grab the buffers on `close` event\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n      }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n  }, {\n    key: \"filterUpgrades\",\n    value: function filterUpgrades(upgrades) {\n      var filteredUpgrades = [];\n      var i = 0;\n      var j = upgrades.length;\n      for (; i < j; i++) {\n        if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n      }\n      return filteredUpgrades;\n    }\n  }]);\n  return Socket;\n}(Emitter);\nSocket.protocol = protocol;","map":{"version":3,"names":["transports","installTimerFunctions","byteLength","decode","parse","Emitter","protocol","Socket","_Emitter","_inherits","_super","_createSuper","uri","_this","opts","arguments","length","undefined","_classCallCheck","call","writeBuffer","hostname","host","secure","port","query","_assertThisInitialized","location","prevBufferLen","Object","assign","path","agent","withCredentials","upgrade","timestampParam","rememberUpgrade","addTrailingSlash","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","replace","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","addEventListener","beforeunloadEventListener","transport","removeAllListeners","close","offlineEventListener","onClose","description","open","_createClass","key","value","createTransport","name","EIO","sid","socket","_this2","priorWebsocketSuccess","indexOf","setTimeoutFn","emitReserved","readyState","e","shift","setTransport","_this3","on","onDrain","bind","onPacket","onError","reason","probe","_this4","failed","onTransportOpen","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","off","onOpen","i","l","packet","onHandshake","JSON","resetPingTimeout","sendPacket","code","filterUpgrades","maxPayload","_this5","clearTimeoutFn","autoUnref","unref","splice","writable","packets","getWritablePackets","shouldCheckPayloadSize","payloadSize","slice","write","options","fn","compress","push","_this6","cleanupAndClose","waitForUpgrade","removeEventListener","filteredUpgrades","j"],"sources":["/home/nikhil/Desktop/new chess/node_modules/engine.io-client/build/esm/socket.js"],"sourcesContent":["import { transports } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nexport class Socket extends Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri - uri or options\n     * @param {Object} opts - options\n     */\n    constructor(uri, opts = {}) {\n        super();\n        this.writeBuffer = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            uri = parse(uri);\n            opts.hostname = uri.host;\n            opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n            opts.port = uri.port;\n            if (uri.query)\n                opts.query = uri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = parse(opts.host).host;\n        }\n        installTimerFunctions(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = opts.transports || [\"polling\", \"websocket\"];\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            addTrailingSlash: true,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024,\n            },\n            transportOptions: {},\n            closeOnBeforeunload: true,\n        }, opts);\n        this.opts.path =\n            this.opts.path.replace(/\\/$/, \"\") +\n                (this.opts.addTrailingSlash ? \"/\" : \"\");\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = decode(this.opts.query);\n        }\n        // set on handshake\n        this.id = null;\n        this.upgrades = null;\n        this.pingInterval = null;\n        this.pingTimeout = null;\n        // set on heartbeat\n        this.pingTimeoutTimer = null;\n        if (typeof addEventListener === \"function\") {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                this.beforeunloadEventListener = () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                };\n                addEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this.offlineEventListener = () => {\n                    this.onClose(\"transport close\", {\n                        description: \"network connection lost\",\n                    });\n                };\n                addEventListener(\"offline\", this.offlineEventListener, false);\n            }\n        }\n        this.open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} name - transport name\n     * @return {Transport}\n     * @private\n     */\n    createTransport(name) {\n        const query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port,\n        });\n        return new transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n    open() {\n        let transport;\n        if (this.opts.rememberUpgrade &&\n            Socket.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1) {\n            transport = \"websocket\";\n        }\n        else if (0 === this.transports.length) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        else {\n            transport = this.transports[0];\n        }\n        this.readyState = \"opening\";\n        // Retry with the next transport if the transport is disabled (jsonp: false)\n        try {\n            transport = this.createTransport(transport);\n        }\n        catch (e) {\n            this.transports.shift();\n            this.open();\n            return;\n        }\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n    setTransport(transport) {\n        if (this.transport) {\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this.onDrain.bind(this))\n            .on(\"packet\", this.onPacket.bind(this))\n            .on(\"error\", this.onError.bind(this))\n            .on(\"close\", (reason) => this.onClose(\"transport close\", reason));\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n    probe(name) {\n        let transport = this.createTransport(name);\n        let failed = false;\n        Socket.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", (msg) => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = (err) => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        transport.open();\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n        // we check for `readyState` in case an `open`\n        // listener already closed the socket\n        if (\"open\" === this.readyState && this.opts.upgrade) {\n            let i = 0;\n            const l = this.upgrades.length;\n            for (; i < l; i++) {\n                this.probe(this.upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n    onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this.resetPingTimeout();\n                    this.sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this.onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this.upgrades = this.filterUpgrades(data.upgrades);\n        this.pingInterval = data.pingInterval;\n        this.pingTimeout = data.pingTimeout;\n        this.maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n    resetPingTimeout() {\n        this.clearTimeoutFn(this.pingTimeoutTimer);\n        this.pingTimeoutTimer = this.setTimeoutFn(() => {\n            this.onClose(\"ping timeout\");\n        }, this.pingInterval + this.pingTimeout);\n        if (this.opts.autoUnref) {\n            this.pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n    onDrain() {\n        this.writeBuffer.splice(0, this.prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this.prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this.getWritablePackets();\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this.prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    getWritablePackets() {\n        const shouldCheckPayloadSize = this.maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += byteLength(data);\n            }\n            if (i > 0 && payloadSize > this.maxPayload) {\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        return this.writeBuffer;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @return {Socket} for chaining.\n     */\n    write(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    send(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n    sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options,\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n    close() {\n        const close = () => {\n            this.onClose(\"forced close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n    onError(err) {\n        Socket.priorWebsocketSuccess = false;\n        this.emitReserved(\"error\", err);\n        this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n    onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            // clear timers\n            this.clearTimeoutFn(this.pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (typeof removeEventListener === \"function\") {\n                removeEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n                removeEventListener(\"offline\", this.offlineEventListener, false);\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this.prevBufferLen = 0;\n        }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n    filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        let i = 0;\n        const j = upgrades.length;\n        for (; i < j; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\nSocket.protocol = protocol;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}